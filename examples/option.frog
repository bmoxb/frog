data option = Some int | None

# `bind f o` is `f x` if `o` is `Some x`, and `None` otherwise.
let bind f o : (int -> option) option -> option =
    match o with
    | Some x -> f x
    | None   -> None

# `map f o` if `Some (f x)` if `o` is Some `x`, and `None` otherwise.
let map f o : (int -> int) option -> option =
    match o with
    | Some x -> Some (f x)
    | None   -> None

# Extract the value from an option. Returns 0 if `None`.
let get o : option -> int = match o with Some x -> x | None -> 0

let main : @in -> @out =
    let n : int = @in in
    let add_n x : int -> int = x + n in
    let opt : option = map add_n (Some 5) in
    @out (get opt);
    let return_none x : int -> option = None in
    @out (get (bind return_none opt))
