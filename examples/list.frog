data list = Cons int list | Nil

# Print out each value in a list.
let rec print l : list -> @out =
    match l with
    | Cons head tail -> @out head; print tail
    | Nil            -> @out ""

# Reverse a list.
let reverse l : list -> list =
    let rec loop old new : list list -> list =
        match old with
        | Cons head tail -> loop tail (Cons head new)
        | Nil            -> new
    in
    loop l Nil

# Apply some function f to each element in a list.
let map f l : (int -> int) list -> list =
    let rec loop old new : list list -> list =
        match old with
        | Cons head tail -> loop tail (Cons (f head) new)
        | Nil            -> reverse new
    in
    loop l Nil

# Sum the values in a list.
let sum l : list -> int =
    let rec loop l acc : list int -> int =
        match l with
        | Cons head tail -> loop tail (acc + head)
        | Nil            -> acc
    in
    loop l 0

let main : unit -> @out =
    let old : list = Cons 5 (Cons 10 (Cons 15 (Cons 20 Nil))) in
    print old;
    let n : int = @in in
    let times_n x : int -> int = x * n in
    let new : list =  map times_n old in
    print new;
    @out (sum new)
